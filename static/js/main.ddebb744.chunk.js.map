{"version":3,"sources":["app/assets/logo.png","app/components/BaseLayout.tsx","app/components/Header.tsx","features/characters/utils/charactersStorage.ts","app/api.ts","features/characters/api/charactersApi.ts","app/helpers/addApikeyParamsInterceptor.ts","features/characters/thunks/charactersThunks.ts","features/characters/components/CharacterSearch.tsx","features/characters/slices/charactersSlice.ts","features/characters/selectors/charactersSelectors.ts","features/characters/components/CharacterCard.tsx","features/characters/components/CharactersList.tsx","features/characters/screens/CharactersIndex.tsx","features/characters/components/CharacterForm.tsx","features/series/api/seriesApi.ts","features/series/thunks/seriesThunks.ts","features/series/slices/seriesSlice.ts","features/series/selectors/seriesSelectors.ts","features/series/components/SerieCard.tsx","features/series/components/SeriesList.tsx","features/characters/screens/CharacterDetail.tsx","app/Routes.tsx","App.tsx","app/store.ts","serviceWorker.ts","app/constants/BASE_THEME.ts","index.tsx"],"names":["module","exports","BaseLayout","props","sx","flexDirection","justifyContent","header","py","maxWidth","children","Header","as","borderBottom","borderColor","alignItems","to","src","logo","textAlign","href","characterStorage","getAll","items","localStorage","getItem","JSON","parse","getById","id","saveEdited","character","name","description","newItems","setItem","stringify","api","Axios","create","baseURL","paramsSerializer","fetchCharacters","a","offset","query","params","nameStartsWith","limit","get","response","data","result","results","map","item","stored","fetchSingleCharacter","storage","interceptors","request","use","config","apikey","process","loadCharacters","createAsyncThunk","options","loadSingleCharacter","CharacterSearch","useState","setQuery","useDebounce","debouncedQuery","dispatch","useDispatch","useEffect","undefined","my","borderRadius","bg","p","color","data-testid","opacity","placeholder","value","onChange","e","target","charactersAdapter","createEntityAdapter","charactersReducer","createSlice","initialState","getInitialState","total","status","all","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","hasQueryChanged","meta","arg","hasNoOffset","payload","setAll","addMany","rejected","characterId","upsertOne","reducer","charactersSelectors","getSelectors","selectAllCharactersIds","createSelector","characters","selectIds","createSelectCharacterById","selectById","selectStatusOfLoadCharacters","selectCurrentCharactersQuery","selectCurrentCharactersOffset","CharacterCard","React","memo","selectCharacterById","useMemo","useSelector","thumbnailSource","thumbnail","path","extension","display","overflow","ratio","objectFit","objectPosition","height","flexGrow","m","CharactersList","onLoadMore","useCallback","columns","key","marginY","onClick","CharactersIndex","validationSchema","object","string","required","CharacterForm","push","useHistory","useFormik","initialValues","onSubmit","values","handleChange","handleBlur","handleSubmit","htmlFor","onBlur","mt","rows","type","fetchSeriesByCharacter","loadSeriesByCharacter","seriesAdapter","seriesReducer","byCharacter","ids","upsertMany","seriesSelectors","SerieCard","selectSeriesById","series","createSelectSeriesById","width","title","SeriesList","selectSeriesByCharacter","createSelectSeriesByCharacter","selectStatusOfLoadSeriesByCharacter","createSelectStatusOfLoadSeriesByCharacter","CharacterDetail","useParams","selectStatusOfLoadCharacterById","createSelectStatusOfLoadCharacterById","mr","fontSize","Routes","exact","component","App","store","configureStore","Boolean","window","location","hostname","match","BASE_THEME","tailwindTheme","colors","primary","dark","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddebb744.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f19e3c78.png\";","import React, { FC } from \"react\";\nimport { Container, Flex } from \"theme-ui\";\n\nexport interface BaseLayoutProps {\n  header: JSX.Element;\n}\n\nconst BaseLayout: FC<BaseLayoutProps> = (props) => {\n  return (\n    <Flex\n      sx={{\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n    >\n      {props.header}\n      <Container\n        sx={{\n          py: 2,\n          maxWidth: \"64em\",\n        }}\n      >\n        {props.children}\n      </Container>\n    </Flex>\n  );\n};\n\nexport default BaseLayout;\n","import React from \"react\";\nimport { Container, Flex, Text, Image, Link as LinkThemeUI } from \"theme-ui\";\nimport logo from \"../assets/logo.png\";\nimport { Link } from \"react-router-dom\";\n\nexport const Header = () => {\n  return (\n    <Flex\n      as=\"header\"\n      sx={{\n        justifyContent: \"center\",\n        borderBottom: \"1px solid\",\n        borderColor: \"gray.4\",\n      }}\n    >\n      <Container sx={{ py: 3, maxWidth: \"64em\" }}>\n        <Flex sx={{ justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <Flex>\n            <Link to=\"/\">\n              <Image sx={{ maxWidth: \"100px\" }} src={logo} />\n            </Link>\n          </Flex>\n\n          <Flex\n            sx={{\n              flexDirection: \"column\",\n              textAlign: \"right\",\n            }}\n          >\n            <Text>Matheus Gambati</Text>\n            <LinkThemeUI href=\"https://github.com/mgambati\">Github</LinkThemeUI>\n            <LinkThemeUI href=\"https://www.linkedin.com/in/matheusgambati/\">\n              LinkedIn\n            </LinkThemeUI>\n          </Flex>\n        </Flex>\n      </Container>\n    </Flex>\n  );\n};\n","import { Dictionary } from \"@reduxjs/toolkit\";\nimport { Character, EditableCharacterFields } from \"../typings/charactersTypes\";\n\n/**\n * Armazena personagems editados\n */\nconst characterStorage = {\n  getAll() {\n    const items = localStorage.getItem(\"editedCharacters\");\n    if (!items) return {};\n\n    return JSON.parse(items) as Dictionary<EditableCharacterFields>;\n  },\n  getById(id: string | number) {\n    const items = characterStorage.getAll();\n\n    return items[id];\n  },\n  saveEdited(character: Character) {\n    const { name, description } = character;\n\n    const items = characterStorage.getAll();\n\n    const newItems: Dictionary<EditableCharacterFields> = {\n      ...items,\n      [character.id]: { name, description },\n    };\n\n    localStorage.setItem(\"editedCharacters\", JSON.stringify(newItems));\n  },\n};\n\nexport default characterStorage;\n","import Axios from \"axios\";\nimport { stringify } from \"qs\";\nimport { addApikeyParamsInterceptor } from \"./helpers/addApikeyParamsInterceptor\";\n\nexport const api = Axios.create({\n  baseURL: \"https://gateway.marvel.com/v1/public/\",\n  paramsSerializer: stringify,\n});\n\napi.interceptors.request.use(addApikeyParamsInterceptor);\n","import { Character } from \"../typings/charactersTypes\";\nimport characterStorage from \"../utils/charactersStorage\";\nimport { PaginatedResponse } from \"../../../app/typings/apiTypes\";\nimport { api } from \"../../../app/api\";\n\nexport async function fetchCharacters(offset = 0, query?: string) {\n  const params = {\n    nameStartsWith: query,\n    offset,\n    limit: 20,\n  };\n\n  const { data: response } = await api.get<PaginatedResponse<Character>>(\n    \"/characters\",\n    { params }\n  );\n\n  // Merge the results from API with the ones on localStorage\n  const result = response.data.results.map((item) => {\n    const stored = characterStorage.getById(item.id);\n    return stored ? { ...item, ...stored } : item;\n  });\n\n  return {\n    ...response.data,\n    results: result,\n  };\n}\n\nexport async function fetchSingleCharacter(id: string | number) {\n  const { data: response } = await api.get<PaginatedResponse<Character>>(\n    `/characters/${id}`\n  );\n\n  // Merge the result from API with the ones on localStorage\n  const storage = characterStorage.getById(id);\n  const character = response.data.results[0];\n  return storage ? { ...character, ...storage } : character;\n}\n","import { AxiosRequestConfig } from \"axios\";\n\n/**\n * Devido a um bug no Axios, default params não sofre merge com params da request;\n * Para resolver isso usa-se um interceptor\n */\nexport function addApikeyParamsInterceptor(\n  config: AxiosRequestConfig\n): AxiosRequestConfig {\n  config.params = {\n    ...config.params,\n    apikey: process.env[\"REACT_APP_MARVEL_API_KEY\"],\n  };\n\n  return config;\n}\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchCharacters, fetchSingleCharacter } from \"../api/charactersApi\";\n\nexport interface LoadCharactersOptions {\n  query?: string;\n  offset: number;\n}\n\nexport const loadCharacters = createAsyncThunk(\n  \"characters/loadCharacters\",\n  async (options: LoadCharactersOptions) => {\n    return await fetchCharacters(options.offset, options.query);\n  }\n);\n\nexport const loadSingleCharacter = createAsyncThunk(\n  \"characters/loadSingleCharacter\",\n  async (id: string | number) => {\n    return await fetchSingleCharacter(id);\n  }\n);\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Box, Input, Text } from \"theme-ui\";\nimport { useDebounce } from \"use-debounce\";\nimport { useDispatch } from \"react-redux\";\nimport { loadCharacters } from \"../thunks/charactersThunks\";\nexport interface CharacterSearchProps {}\n\nconst CharacterSearch: FC<CharacterSearchProps> = () => {\n  const [query, setQuery] = useState(\"\");\n  const [debouncedQuery] = useDebounce(query, 500);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(\n      loadCharacters({\n        query: debouncedQuery ? debouncedQuery : undefined,\n        offset: 0,\n      })\n    );\n  }, [debouncedQuery, dispatch]);\n\n  return (\n    <Box\n      sx={{\n        my: 2,\n        borderRadius: \"lg\",\n        bg: \"red.7\",\n        p: 3,\n      }}\n    >\n      <Text as=\"label\" color=\"white\">\n        Procurar Personagem\n      </Text>\n      <Input\n        data-testid=\"search-input\"\n        sx={{\n          borderColor: \"white\",\n          \"::placeholder\": { color: \"white\", opacity: 0.7 },\n        }}\n        placeholder=\"Hulk\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n    </Box>\n  );\n};\n\nexport default CharacterSearch;\n","import { createEntityAdapter, createSlice, Dictionary } from \"@reduxjs/toolkit\";\nimport { ResourceStatus } from \"../../../app/typings/resourceStatus\";\nimport { Character } from \"../typings/charactersTypes\";\nimport {\n  loadCharacters,\n  loadSingleCharacter,\n} from \"../thunks/charactersThunks\";\n\nexport interface CharactersState {\n  status: Dictionary<ResourceStatus>;\n  offset: number;\n  total: number;\n  query?: string;\n}\n\nexport const charactersAdapter = createEntityAdapter<Character>();\n\nconst charactersSlice = createSlice({\n  name: \"characters\",\n  initialState: charactersAdapter.getInitialState<CharactersState>({\n    query: undefined,\n    offset: 0,\n    total: 0,\n    status: {\n      all: \"idle\",\n    },\n  }),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(loadCharacters.pending, (state) => {\n      state.status[\"all\"] = \"pending\";\n    });\n\n    builder.addCase(loadCharacters.fulfilled, (state, action) => {\n      const hasQueryChanged = state.query !== action.meta.arg.query;\n      const hasNoOffset = action.payload.offset === 0;\n\n      hasQueryChanged || hasNoOffset\n        ? charactersAdapter.setAll(state, action.payload.results)\n        : charactersAdapter.addMany(state, action.payload.results);\n\n      state.status[\"all\"] = \"idle\";\n      state.query = action.meta.arg.query;\n      state.offset = action.payload.offset;\n      state.total = action.payload.total;\n    });\n\n    builder.addCase(loadCharacters.rejected, (state) => {\n      state.status[\"all\"] = \"error\";\n    });\n\n    builder.addCase(loadSingleCharacter.pending, (state, action) => {\n      const characterId = action.meta.arg;\n      state.status[characterId] = \"pending\";\n    });\n\n    builder.addCase(loadSingleCharacter.fulfilled, (state, action) => {\n      const characterId = action.meta.arg;\n      charactersAdapter.upsertOne(state, action.payload);\n      state.status[characterId] = \"idle\";\n    });\n    builder.addCase(loadSingleCharacter.rejected, (state, action) => {\n      const characterId = action.meta.arg;\n      state.status[characterId] = \"error\";\n    });\n  },\n});\n\nconst charactersReducer = charactersSlice.reducer;\nexport default charactersReducer;\n","import { RootState } from \"../../../app/store\";\nimport { charactersAdapter } from \"../slices/charactersSlice\";\nimport { createSelector } from \"@reduxjs/toolkit\";\n\nconst charactersSelectors = charactersAdapter.getSelectors();\n\nconst selectCharacterState = (state: RootState) => state.characters;\n\nexport const selectAllCharactersIds = createSelector(\n  selectCharacterState,\n  charactersSelectors.selectIds\n);\n\nexport const createSelectCharacterById = (id: number | string) => {\n  return (state: RootState) =>\n    charactersSelectors.selectById(state.characters, id);\n};\n\nexport const createSelectStatusOfLoadCharacterById = (id: number | string) => {\n  return (state: RootState) => state.characters.status[id];\n};\n\nexport const selectStatusOfLoadCharacters = (state: RootState) =>\n  state.characters.status[\"all\"];\n\nexport const selectCurrentCharactersQuery = (state: RootState) =>\n  state.characters.query;\n\nexport const selectCurrentCharactersOffset = (state: RootState) =>\n  state.characters.offset;\n","import React, { FC, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Card, Image, Text, AspectRatio, Flex } from \"theme-ui\";\nimport { Link } from \"react-router-dom\";\nimport { createSelectCharacterById } from \"../selectors/charactersSelectors\";\n\nexport interface CharacterCardProps {\n  id: number;\n}\n\nconst CharacterCard: FC<CharacterCardProps> = React.memo(({ id }) => {\n  const selectCharacterById = useMemo(() => createSelectCharacterById(id), [\n    id,\n  ]);\n  const character = useSelector(selectCharacterById);\n  const thumbnailSource = `${character?.thumbnail.path}.${character?.thumbnail.extension}`;\n\n  return (\n    <Link to={`/characters/${id}`} data-testid=\"character-card\">\n      <Card\n        sx={{\n          display: \"flex\",\n          borderRadius: \"lg\",\n          flexDirection: \"column\",\n          overflow: \"hidden\",\n          bg: \"red.7\",\n          \":hover\": { opacity: 0.8 },\n        }}\n      >\n        <AspectRatio ratio={9 / 12}>\n          <Image\n            src={thumbnailSource}\n            sx={{\n              maxWidth: \"none\",\n              objectFit: \"cover\",\n              objectPosition: \"center\",\n              height: \"100%\",\n            }}\n          />\n        </AspectRatio>\n        <Flex\n          sx={{\n            flexGrow: 1,\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <Text sx={{ m: 2 }} color=\"white\">\n            {character?.name}\n          </Text>\n        </Flex>\n      </Card>\n    </Link>\n  );\n});\n\nexport default CharacterCard;\n","import React, { FC, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Box, Button, Flex, Grid, Spinner } from \"theme-ui\";\nimport CharacterCard from \"./CharacterCard\";\nimport {\n  selectAllCharactersIds,\n  selectCurrentCharactersOffset,\n  selectCurrentCharactersQuery,\n  selectStatusOfLoadCharacters,\n} from \"../selectors/charactersSelectors\";\nimport { loadCharacters } from \"../thunks/charactersThunks\";\n\nexport interface CharactersListProps {}\n\nconst CharactersList: FC<CharactersListProps> = () => {\n  const characters = useSelector(selectAllCharactersIds);\n  const status = useSelector(selectStatusOfLoadCharacters);\n  const query = useSelector(selectCurrentCharactersQuery);\n  const offset = useSelector(selectCurrentCharactersOffset);\n\n  const dispatch = useDispatch();\n  const onLoadMore = useCallback(() => {\n    dispatch(loadCharacters({ query, offset: offset + 20 }));\n  }, [dispatch, query, offset]);\n\n  return (\n    <Box>\n      <Grid columns=\"1fr 1fr 1fr 1fr\">\n        {characters.map((id) => (\n          <CharacterCard key={id} id={id as number} />\n        ))}\n      </Grid>\n      <Flex sx={{ justifyContent: \"center\", marginY: 2 }}>\n        {status === \"pending\" ? (\n          <Spinner data-testid=\"loading-characters-spinner\" />\n        ) : (\n          <Button data-testid=\"load-more-btn\" onClick={onLoadMore}>\n            Carregar mais\n          </Button>\n        )}\n      </Flex>\n    </Box>\n  );\n};\n\nexport default CharactersList;\n","import React, { FC } from \"react\";\nimport { Flex, Heading } from \"theme-ui\";\nimport CharacterSearch from \"../components/CharacterSearch\";\nimport CharactersList from \"../components/CharactersList\";\n\nexport interface CharactersIndexProps {}\n\nconst CharactersIndex: FC<CharactersIndexProps> = () => {\n  return (\n    <Flex sx={{ flexDirection: \"column\" }}>\n      <Heading>Personagens Marvel</Heading>\n      <CharacterSearch />\n      <CharactersList />\n    </Flex>\n  );\n};\n\nexport default CharactersIndex;\n","import { useFormik } from \"formik\";\nimport React, { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Input, Label, Textarea } from \"theme-ui\";\nimport { object, string } from \"yup\";\nimport characterStorage from \"../utils/charactersStorage\";\nimport { loadSingleCharacter } from \"../thunks/charactersThunks\";\nimport { Character } from \"../typings/charactersTypes\";\n\nexport interface CharacterFormProps {\n  character: Character;\n}\n\nconst CharacterForm: FC<CharacterFormProps> = (props) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { values, handleChange, handleBlur, handleSubmit } = useFormik({\n    initialValues: props.character,\n    validationSchema,\n    onSubmit: (values) => {\n      push(`/characters/${values.id}`);\n      dispatch(loadSingleCharacter(values.id));\n      characterStorage.saveEdited(values);\n    },\n  });\n\n  return (\n    <form onSubmit={handleSubmit as any}>\n      <Label htmlFor=\"name\">Nome</Label>\n      <Input\n        name=\"name\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n      />\n\n      <Label sx={{ mt: 2 }} htmlFor=\"description\">\n        Descrição\n      </Label>\n      <Textarea\n        name=\"description\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.description}\n        rows={6}\n      />\n      <Button type=\"submit\" sx={{ mt: 2 }}>\n        Salvar\n      </Button>\n    </form>\n  );\n};\n\nexport const validationSchema = object({\n  name: string().required(),\n  description: string().required(),\n});\n\nexport default CharacterForm;\n","import { Series } from \"../typings/seriesTypes\";\nimport { api } from \"../../../app/api\";\nimport { PaginatedResponse } from \"../../../app/typings/apiTypes\";\n\nexport async function fetchSeriesByCharacter(characterId: number | string) {\n  const { data: response } = await api.get<PaginatedResponse<Series>>(\n    `/characters/${characterId}/series`\n  );\n\n  return response.data;\n}\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchSeriesByCharacter } from \"../api/seriesApi\";\n\nexport const loadSeriesByCharacter = createAsyncThunk(\n  \"series/loadSeriesByCharacter\",\n  async (characterId: number | string) => {\n    return await fetchSeriesByCharacter(characterId);\n  }\n);\n","import { createEntityAdapter, createSlice, Dictionary } from \"@reduxjs/toolkit\";\nimport { ResourceStatus } from \"../../../app/typings/resourceStatus\";\nimport { loadSeriesByCharacter } from \"../thunks/seriesThunks\";\nimport { Series } from \"../typings/seriesTypes\";\n\nexport interface SeriesState {\n  status: Dictionary<ResourceStatus>;\n  byCharacter: Dictionary<number[]>;\n}\n\nexport const seriesAdapter = createEntityAdapter<Series>();\n\nconst seriesSlice = createSlice({\n  name: \"characters\",\n  initialState: seriesAdapter.getInitialState<SeriesState>({\n    byCharacter: {},\n    status: {},\n  }),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(loadSeriesByCharacter.pending, (state, action) => {\n      const characterId = action.meta.arg;\n      const key = `character.${characterId}`;\n      state.status[key] = \"pending\";\n    });\n\n    builder.addCase(loadSeriesByCharacter.fulfilled, (state, action) => {\n      const characterId = action.meta.arg;\n      const key = `character.${characterId}`;\n      const ids = action.payload.results.map((item) => item.id);\n\n      state.status[key] = \"idle\";\n      state.byCharacter[characterId] = ids;\n      seriesAdapter.upsertMany(state, action.payload.results);\n    });\n\n    builder.addCase(loadSeriesByCharacter.rejected, (state, action) => {\n      const characterId = action.meta.arg;\n      const key = `character.${characterId}`;\n\n      state.status[key] = \"error\";\n    });\n  },\n});\n\nconst seriesReducer = seriesSlice.reducer;\nexport default seriesReducer;\n","import { seriesAdapter } from \"../slices/seriesSlice\";\nimport { RootState } from \"../../../app/store\";\n\nconst seriesSelectors = seriesAdapter.getSelectors();\n\nexport const createSelectSeriesByCharacter = (characterId: number | string) => {\n  return (state: RootState) => state.series.byCharacter[characterId];\n};\n\nexport const createSelectSeriesById = (id: number | string) => {\n  return (state: RootState) => seriesSelectors.selectById(state.series, id);\n};\n\nexport const createSelectStatusOfLoadSeriesByCharacter = (\n  characterId: number | string\n) => {\n  return (state: RootState) => state.series.status[`character.${characterId}`];\n};\n","import React, { FC, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AspectRatio, Card, Flex, Image, Text } from \"theme-ui\";\nimport { createSelectSeriesById } from \"../selectors/seriesSelectors\";\n\nexport interface SeriesCardProps {\n  id: number | string;\n}\n\nconst SerieCard: FC<SeriesCardProps> = ({ id }) => {\n  const selectSeriesById = useMemo(() => createSelectSeriesById(id), [id]);\n\n  const series = useSelector(selectSeriesById);\n  const thumbnailSource = `${series?.thumbnail.path}.${series?.thumbnail.extension}`;\n\n  return (\n    <Card\n      sx={{\n        display: \"flex\",\n        borderRadius: \"lg\",\n        flexDirection: \"column\",\n        overflow: \"hidden\",\n        bg: \"red.7\",\n        \":hover\": { opacity: 0.8 },\n      }}\n      data-testid='serie-card'\n    >\n      <AspectRatio ratio={1}>\n        <Image\n          src={thumbnailSource}\n          sx={{\n            width: \"100%\",\n            objectFit: \"cover\",\n            objectPosition: \"center\",\n            height: \"100%\",\n          }}\n        />\n      </AspectRatio>\n      <Flex\n        sx={{\n          flexGrow: 1,\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Text sx={{ m: 2 }} color=\"white\">\n          {series?.title}\n        </Text>\n      </Flex>\n    </Card>\n  );\n};\n\nexport default SerieCard;\n","import React, { FC, useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Flex, Grid, Spinner } from \"theme-ui\";\nimport {\n  createSelectSeriesByCharacter,\n  createSelectStatusOfLoadSeriesByCharacter,\n} from \"../selectors/seriesSelectors\";\nimport { loadSeriesByCharacter } from \"../thunks/seriesThunks\";\nimport SerieCard from \"./SerieCard\";\n\nexport interface SeriesListProps {\n  characterId: string | number;\n}\n\nconst SeriesList: FC<SeriesListProps> = ({ characterId }) => {\n  const selectSeriesByCharacter = useMemo(\n    () => createSelectSeriesByCharacter(characterId),\n    [characterId]\n  );\n  const selectStatusOfLoadSeriesByCharacter = useMemo(\n    () => createSelectStatusOfLoadSeriesByCharacter(characterId),\n    [characterId]\n  );\n  const series = useSelector(selectSeriesByCharacter);\n  const status = useSelector(selectStatusOfLoadSeriesByCharacter);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadSeriesByCharacter(characterId));\n  }, [dispatch, characterId]);\n\n  if (status === \"pending\") {\n    return (\n      <Flex sx={{ justifyContent: \"center\" }} data-testid='loading-spinner'>\n        <Spinner />\n      </Flex>\n    );\n  }\n\n  return (\n    <Grid columns=\"1fr 1fr 1fr 1fr\">\n      {series?.map((id) => (\n        <SerieCard key={id} id={id} />\n      ))}\n    </Grid>\n  );\n};\n\nexport default SeriesList;\n","import React, { FC, useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, Route, Switch, useParams } from \"react-router-dom\";\nimport {\n  AspectRatio,\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Heading,\n  Image,\n  Spinner,\n  Text,\n} from \"theme-ui\";\nimport CharacterForm from \"../components/CharacterForm\";\nimport {\n  createSelectCharacterById,\n  createSelectStatusOfLoadCharacterById,\n} from \"../selectors/charactersSelectors\";\nimport { loadSingleCharacter } from \"../thunks/charactersThunks\";\nimport SeriesList from \"../../series/components/SeriesList\";\n\nexport interface CharacterDetailParams {\n  id: string;\n}\n\nconst CharacterDetail: FC = () => {\n  const { id } = useParams<CharacterDetailParams>();\n  const selectCharacterById = useMemo(() => createSelectCharacterById(id), [\n    id,\n  ]);\n  const selectStatusOfLoadCharacterById = useMemo(\n    () => createSelectStatusOfLoadCharacterById(id),\n    [id]\n  );\n\n  const character = useSelector(selectCharacterById);\n  const status = useSelector(selectStatusOfLoadCharacterById);\n  const thumbnailSource = `${character?.thumbnail.path}.${character?.thumbnail.extension}`;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadSingleCharacter(id));\n  }, [dispatch, id]);\n\n  if (status === \"pending\") {\n    return (\n      <Flex sx={{ justifyContent: \"center\", marginY: 2 }}>\n        <Spinner />\n      </Flex>\n    );\n  }\n\n  return (\n    <Grid columns=\"1fr 4fr\" sx={{ marginY: 2 }}>\n      <Box>\n        <AspectRatio ratio={9 / 12}>\n          <Image\n            src={thumbnailSource}\n            sx={{\n              maxWidth: \"none\",\n              objectFit: \"cover\",\n              objectPosition: \"center\",\n              height: \"100%\",\n            }}\n          />\n        </AspectRatio>\n      </Box>\n      <Box>\n        <Switch>\n          <Route path=\"/characters/:id/edit\">\n            {character && <CharacterForm character={character} />}\n          </Route>\n          <Route path=\"/characters/:id\">\n            <Flex>\n              <Heading as=\"h2\" color=\"red.7\" sx={{ mr: 2 }}>\n                {character?.name}\n              </Heading>\n              <Link to={`/characters/${id}/edit`}>\n                <Button sx={{ fontSize: \"14px\", py: 1 }}>Editar</Button>\n              </Link>\n            </Flex>\n            <Text>{character?.description}</Text>\n            <Heading as=\"h3\" color=\"red.7\">\n              Series\n            </Heading>\n            <SeriesList characterId={id} />\n          </Route>\n        </Switch>\n      </Box>\n    </Grid>\n  );\n};\n\nexport default CharacterDetail;\n","import React, { FC } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport CharactersIndex from \"../features/characters/screens/CharactersIndex\";\nimport CharacterDetail from \"../features/characters/screens/CharacterDetail\";\n\nconst Routes: FC = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={CharactersIndex} />\n      <Route path=\"/characters/:id\" component={CharacterDetail} />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport BaseLayout from \"./app/components/BaseLayout\";\nimport { Header } from \"./app/components/Header\";\nimport Routes from \"./app/Routes\";\n\nfunction App() {\n  return (\n    <BaseLayout header={<Header />}>\n      <Routes />\n    </BaseLayout>\n  );\n}\n\nexport default App;\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\nimport charactersReducer from \"../features/characters/slices/charactersSlice\";\nimport seriesReducer from \"../features/series/slices/seriesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    characters: charactersReducer,\n    series: seriesReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import tailwindTheme from \"@theme-ui/preset-tailwind\";\n\nexport type BaseTheme = typeof tailwindTheme;\n\nexport const BASE_THEME: BaseTheme = {\n  ...tailwindTheme,\n  colors: {\n    ...tailwindTheme.colors,\n    primary: tailwindTheme.colors.dark,\n  },\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider, Theme } from \"theme-ui\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BASE_THEME } from \"./app/constants/BASE_THEME\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={BASE_THEME as Theme}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}